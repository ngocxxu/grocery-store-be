package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"strconv"

	"github.com/ngocxxu/grocery-store-svelte-be/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *Resolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	user, err := r.UserService.CreateUser(name, email)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:    strconv.FormatUint(uint64(user.ID), 10),
		Name:  user.Name,
		Email: user.Email,
	}, nil
}

// Users is the resolver for the users field.
func (r *Resolver) Users(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserService.GetUsers()
	if err != nil {
		return nil, err
	}
	var result []*model.User
	for _, u := range users {
		result = append(result, &model.User{
			ID:    strconv.FormatUint(uint64(u.ID), 10),
			Name:  u.Name,
			Email: u.Email,
		})
	}
	return result, nil
}

// User is the resolver for the user field.
func (r *Resolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := r.UserService.GetUser(id)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:    strconv.FormatUint(uint64(user.ID), 10),
		Name:  user.Name,
		Email: user.Email,
	}, nil
}
