package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"strconv"

	"github.com/ngocxxu/grocery-store-svelte-be/graph/model"
)

type CategoryResolver struct {
	*Resolver
}

func (r *CategoryResolver) CreateCategory(ctx context.Context, name string, description string) (*model.Category, error) {
	category, err := r.CategoryService.CreateCategory(name, description)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          strconv.FormatUint(uint64(category.ID), 10),
		Name:        category.Name,
		Description: category.Description,
	}, nil
}

func (r *CategoryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	users, err := r.CategoryService.GetCategories()
	if err != nil {
		return nil, err
	}
	var result []*model.Category
	for _, u := range users {
		result = append(result, &model.Category{
			ID:          strconv.FormatUint(uint64(u.ID), 10),
			Name:        u.Name,
			Description: u.Description,
		})
	}
	return result, nil
}

func (r *CategoryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	category, err := r.CategoryService.GetCategory(id)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          strconv.FormatUint(uint64(category.ID), 10),
		Name:        category.Name,
		Description: category.Description,
	}, nil
}
